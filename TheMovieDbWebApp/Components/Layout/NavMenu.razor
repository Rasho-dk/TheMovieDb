@* @inject IJSRuntime JS
@inject NavigationManager NavigationManager *@


<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <NavLink class="navbar-brand" href="#">MovieDb</NavLink>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link active" aria-current="page" href="#">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/movies">Movies</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/favorite-movies">My list</NavLink>
                </li>  
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Test">RoutingTest</NavLink>
                </li>        
            </ul>
           @*  <div class="d-flex justify-content-end w-100">
                <Search searchQuery="@searchTerm" SearchQuerySubmitted="OnChangeSearch" />
            </div> *@

        </div>
    </div>
</nav>

@code{
    // private string searchTerm = "";
    // private async Task OnChangeSearch(string searchTerm)
    // {
    //     this.searchTerm = searchTerm;
    //     NavigationManager.NavigateTo($"/movies?search={searchTerm}");
    //     StateHasChanged();
    // }


    // private async Task GetInputValue()
    // {
    //     var searchInput = await JS.InvokeAsync<string>("getInputValue", "search-input");
    //     searchTerm = searchInput;
    //     await OnChangeSearch(searchInput);

    // }
}

