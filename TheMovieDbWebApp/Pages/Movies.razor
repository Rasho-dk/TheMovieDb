@page "/movies"
@* @page "/movies/{genreId:int}"
 *@
@using System.Text.RegularExpressions

<PageTitle>Movies</PageTitle>

<div class="container">

    <h3>Movies</h3>

    @if (movies == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <div class="d-flex">
            <Search SearchQueryChanged="@OnChangeSearch" />
            @if (!string.IsNullOrEmpty(genreName))
            {
                <button type="button" class="btn btn-secondary mx-3" @onclick="ResetParams">Genre: @genreName</button>
            }
        </div>


        <div class="row">
            @foreach (var movie in movies)
            {
                <div class="col-md-3 pt-4">
                    <div class="card" style="width: 18rem;">
                        <MovieCard PosterBasePath="@posterBasePath" Movie="@movie" Key="@movieKey" Title="@title" ClickGetMovie="OnClickGetMovie"
                                   ClickAddFavoriteMovie="OnAddFavoriteMovie" ClickRemoveFavoriteMovie="OnRemoveFavorite">
                        </MovieCard>
                    </div>
                </div>
            }
        </div>
        <Pagination CurrentPage="CurrentPage" TotalPages="TotalPages" PageChanged="OnPageChange" />
    }
</div>

@code {
    private readonly string Official_Trailer = "Official Trailer";
    private readonly string Trailer = "Trailer";
    private string movieKey;
    private string title;
    //Genre Id
    private int id;
    //Genre Name
    private string genreName;


    // private string searchTerm = "";
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private List<Movie>? movies;
    public string posterBasePath = "https://image.tmdb.org/t/p/w185_and_h278_bestv2";

    [Inject]
    public IApiServiceGetWithParam<Movie> ApiService { get; set; }
    [Inject]
    public IApiServiceGetWithParam<MovieVideo> ApiServiceMovieVideo { get; set; }
    [Inject]
    public IApiServiceAdd<Movie> ApiServiceAdd { get; set; }
    [Inject]
    public IApiServiceRemove<Movie> ApiServiceRemove { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        LoadParams();
        if (id != 0)
        {
            movies = await ApiService.GetAsync(id: id);
        }
        if (movies == null)
        {
            try
            {
                movies = await ApiService.GetAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }


    private async Task OnChangeSearch(string searchTerm)
    {

        if (string.IsNullOrEmpty(searchTerm))
        {
            movies = await ApiService.GetAsync();
            return; // return to avoid the API call and the foreach loop
        }

        movies = await ApiService.GetAsync(query: searchTerm);
        movies.ForEach(m =>
        {
            m.Poster_Path = string.IsNullOrEmpty(m.Poster_Path) ? "Not Available" : m.Poster_Path;
            m.Title = string.IsNullOrEmpty(m.Title) ? "Not Available" : m.Title;
            m.Overview = string.IsNullOrEmpty(m.Overview) ? "Not Available" : m.Overview;
            m.Release_Date = string.IsNullOrEmpty(m.Release_Date) ? "Not Available" : m.Release_Date;
        });
    }
    private async Task OnPageChange(int newPage)
    {
        CurrentPage = newPage;
        if (id != 0)
        {
            movies = await ApiService.GetAsync(newPage: CurrentPage, id: id);
        }
        else
        {
            movies = await ApiService.GetAsync(newPage: CurrentPage);
        }
        // movies = await ApiService.GetAsync(CurrentPage);

        /*
        * StateHasChanged is typically called automatically after an event handler has been executed.
        * Most of the time, you don't need to call it explicitly. But there are some cases where you need to call it manually e.g.
         when we are going to update timer or a callback from a third-party library (JavaScript library)
        */
        // await InvokeAsync(StateHasChanged);
    }
    private async Task OnClickGetMovie(int id)
    {
        if (id != 0)
        {
            title = movies.Find(m => m.Id == id).Title.ToString();

            var movieVideos = await ApiServiceMovieVideo.GetAsync(id: id);

            if (movieVideos != null)
            {
                foreach (var m in movieVideos)
                {
                    if (m.Name == Official_Trailer || m.Name == Trailer)
                    {
                        movieKey = m.Key;
                        break;
                    }
                }
            }
        }
        else
        {
            movieKey = "";
        }
    }
    private async Task<Movie> OnAddFavoriteMovie(Movie movie)
    {
        var result = await ApiServiceAdd.AddAsync(movie);
        return result;
    }
    private async Task<Movie> OnRemoveFavorite(Movie movie)
    {
        var result = await ApiServiceRemove.RemoveAsync(movie.Id);
        return result;
    }


    private void LoadParams()
    {
        var uri = new Uri(NavigationManager.Uri); //Get the current URL
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query); //Parse the query string
        if (query.TryGetValue("genreId", out var genreId) && query.TryGetValue("genreName", out var genreName))
        {
            id = int.Parse(Regex.Match(genreId, @"\d+").Value);
            this.genreName = genreName;

        }
    }

    private void ResetParams()
    {
        id = 0;
        genreName = "";
        NavigationManager.NavigateTo("/movies", forceLoad: true);
    }

    #region TODO
    /*
    * @using Microsoft.AspNetCore.WebUtilities
    * @inject NavigationManager NavigationManager
    */
    // private string OnChangeSearchV2()
    // {
    //     var uri = new Uri(NavigationManager.Uri);

    //     var query = QueryHelpers.ParseQuery(uri.Query);

    //     if (query.TryGetValue("search", out var searchQuery))
    //     {
    //         searchTerm = searchQuery;
    //     }

    //     return searchTerm;
    // }
    #endregion

}

