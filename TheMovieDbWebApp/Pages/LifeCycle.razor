@page "/lifecycle"
@using System.Threading
<h3>LifeCycle</h3>


<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />

@Count <button class="btn btn-primary" @onclick="StartCountDown">Start Count Down</button>

<div class="border">
    <_LifeCycleChild CountValue="@currentCount" />
</div>
    
<ul>
    @foreach (var item in EventType)
    {
        <li>@item</li>
        <hr />
    }
</ul>






@code {

    //This a parent component that will be used to demonstrate the lifecycle of a component in Blazor

    private int currentCount = 0;

    public List<string> EventType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync");
        // await Task.Delay(1000);
    }
    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync");
        // await Task.Delay(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender) //This is to check if the component is rendered for the first time or not so that mean the second time the component is false 
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 222;
        }
        EventType.Add("OnAfterRender");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync");
        // await Task.Delay(1000);
    }

    protected override bool ShouldRender() //By default this method return always true on the initial render and false on the second render
    {
        EventType.Add("ShouldRender");
        return true;
    }

    void StartCountDown()
    {
        var timer = new Timer(TimerCallback, null, 1000, 1000);
    }
    void TimerCallback(object state)
    {
        if(Count > 0)
        {
            Count --;
            InvokeAsync(StateHasChanged);
        }

    }

}


