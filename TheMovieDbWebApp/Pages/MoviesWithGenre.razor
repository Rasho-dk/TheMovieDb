@page "/movieswithgenre/{genreId:int}/{genreName}"

<PageTitle>Movies</PageTitle>



<div class="container">

    <h3>Movies</h3>

    @if (movies == null)
    {
        <p><em>Loading movies...</em></p>
    }
    else
    {

        <div class="d-flex">
            @if (!string.IsNullOrEmpty(GenreName))
            {
                <button type="button" class="btn btn-secondary mx-3">Genre: @GenreName</button>
            }
        </div>


        <div class="row">
            @foreach (var movie in movies)
            {
                <div class="col-md-3 pt-4">
                    <div class="card" style="width: 18rem;">
                        <MovieCard PosterBasePath="@posterBasePath" Movie="@movie" Key="@movieKey" Title="@title" ClickGetMovie="OnClickGetMovie"
                                   ClickAddFavoriteMovie="OnAddFavoriteMovie" ClickRemoveFavoriteMovie="OnRemoveFavorite">
                        </MovieCard>
                    </div>
                </div>
            }
        </div>
        <Pagination CurrentPage="CurrentPage" TotalPages="TotalPages" PageChanged="OnPageChange" />
    }
</div>

@code {
    [Parameter]
    public int GenreId { get; set; }
    [Parameter]
    public string GenreName { get; set; }


    private readonly string Official_Trailer = "Official Trailer";
    private readonly string Trailer = "Trailer";
    private string movieKey;
    private string title;

    // private string searchTerm = "";
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private List<Movie>? movies;
    public string posterBasePath = "https://image.tmdb.org/t/p/w185_and_h278_bestv2";

    [Inject]
    public IApiServiceGetWithParam<Movie> ApiService { get; set; }
    [Inject]
    public IApiServiceGetWithParam<MovieVideo> ApiServiceMovieVideo { get; set; }
    [Inject]
    public IApiServiceAdd<Movie> ApiServiceAdd { get; set; }
    [Inject]
    public IApiServiceRemove<Movie> ApiServiceRemove { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    // protected override async Task OnInitializedAsync()
    // {
    //     // LoadParams();
    //     if (GenreId != 0)
    //     {
    //         movies = await ApiService.GetAsync(id: GenreId);
    //     }
    // }
    protected override async Task OnParametersSetAsync()
    {
        if (GenreId != 0)
        {
            movies = await ApiService.GetAsync(id: GenreId);
        }
    }
    private async Task OnPageChange(int newPage)
    {
        CurrentPage = newPage;
        if (GenreId != 0)
        {
            movies = await ApiService.GetAsync(newPage: CurrentPage, id: GenreId);
        }

    }
    private async Task OnClickGetMovie(int id)
    {
        if (id != 0)
        {
            title = movies.Find(m => m.Id == id).Title.ToString();

            var movieVideos = await ApiServiceMovieVideo.GetAsync(id: id);

            if (movieVideos != null)
            {
                foreach (var m in movieVideos)
                {
                    if (m.Name == Official_Trailer || m.Name == Trailer)
                    {
                        movieKey = m.Key;
                        break;
                    }
                }
            }
        }
        else
        {
            movieKey = "";
        }
    }

    private async Task<Movie> OnAddFavoriteMovie(Movie movie)
    {
        var result = await ApiServiceAdd.AddAsync(movie);
        return result;
    }
    private async Task<Movie> OnRemoveFavorite(Movie movie)
    {
        var result = await ApiServiceRemove.RemoveAsync(movie.Id);
        return result;
    }


    // private void LoadParams()
    // {
    //     var uri = new Uri(NavigationManager.Uri); //Get the current URL
    //     var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query); //Parse the query string
    //     if (query.TryGetValue("genreId", out var genreId) && query.TryGetValue("genreName", out var genreName))
    //     {
    //         id = int.Parse(Regex.Match(genreId, @"\d+").Value);
    //         this.genreName = genreName;

    //     }
    // }


}
